@page "/products"
@inject ISearchProductAsync  searchProduct
@inject ISearchProduct  searchProduct1
<h3>Search Product </h3>
<SearchBar OnSearch="HandleSearch"></SearchBar>
<br />
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Brand</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>

        @if (products != null && products.Count() > 0)
        {
            @foreach (Product product in products)
            {
                @if (product != null)
                {
                    <ProductItem Product=product />
                }

            }
        }
        else
        {
            <tr> <td colspan="3">can't find product</td></tr>
        }
    </tbody>
</table>
@code {

    ///  int id = 0;

    private IEnumerable<Product> products = null;

    /* order of life cycle events for blazor component*/

    //protected override async Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();
    //    products = (await searchProduct.Execute());
    //}

    //private async Task HandleSearch(string filter)
    //{
    //    products = (await searchProduct.Execute(filter));
    //}
    protected override void  OnInitialized()
    {
         base.OnInitializedAsync();
        products =  searchProduct1.Execute();
    }

    private   void HandleSearch(string filter)
    {
        products =  searchProduct1.Execute(filter);
    }


    ///* order of life cycle events for Blazor component*/
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();
    //}

    protected override bool ShouldRender()
    {
        return base.ShouldRender();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }


    /* order of life cycle async events for Blazor component*/

    //protected override async Task OnParametersSetAsync()
    //{
    //    await base.OnParametersSetAsync();
    //}

    //protected override async Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();
    //}
    //protected override bool ShouldRender()
    //{
    //    return base.ShouldRender();
    //}
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await base.OnAfterRenderAsync(firstRender);
    //}

    //protected override void OnParametersSet()
    //{
    //    base.OnParametersSet();
    //}

    //protected override bool ShouldRender()
    //{
    //    return base.ShouldRender();
    //}


    //protected override void OnAfterRender(bool firstRender)
    //{
    //    base.OnAfterRender(firstRender);
    //}


    //protected override Task OnInitializedAsync()
    //{
    //    return base.OnInitializedAsync();
    //}

    //protected override Task OnParametersSetAsync()
    //{
    //    return base.OnParametersSetAsync();
    //}


    //protected override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    return base.OnAfterRenderAsync(firstRender);
    //}

}